name: Deploy Nuxt site to Pages

on:
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Static HTML export with React
        run: ${{ steps.detect-package-manager.outputs.manager }} run build
      - name: Publish build folder
        env:
          TARGET_REPO: git@github.com:username/publish.git
          TARGET_BRANCH: main # or your primary branch for the publish repo
          COMMIT_MESSAGE: Update build folder
        run: |
          # Install required packages
          sudo apt-get update
          sudo apt-get install -y rsync

          # Setup SSH key for pushing to the publish repository
          echo "${{ secrets.DEPLOY_KEY }}" > deploy_key
          chmod 600 deploy_key
          eval "$(ssh-agent -s)"
          ssh-add deploy_key

          # Create the script file
          cat > publish-build.sh << 'EOF'
          #!/bin/bash

          SOURCE_FOLDER="build"
          TARGET_REPO="${TARGET_REPO}"
          TARGET_BRANCH="${TARGET_BRANCH}"
          COMMIT_MESSAGE="${COMMIT_MESSAGE}"
          CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
          CURRENT_DIR=$(pwd)
          TEMP_DIR=$(mktemp -d)
          git clone "$TARGET_REPO" "$TEMP_DIR" --branch "$TARGET_BRANCH" --single-branch --depth 1
          rsync -a --delete "$SOURCE_FOLDER/" "$TEMP_DIR/"
          cd "$TEMP_DIR"
          git add .
          git commit -m "$COMMIT_MESSAGE"
          git push origin "$TARGET_BRANCH"
          cd "$CURRENT_DIR"
          rm -rf "$TEMP_DIR"
          EOF

          # Make the script executable
          chmod +x publish-build.sh

          # Run the script
          ./publish-build.sh
